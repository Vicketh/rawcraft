name: Deploy Rawcraft Website to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull
          git lfs checkout

      - name: Verify Git LFS files
        run: |
          echo "Checking Git LFS tracked files..."
          git lfs ls-files
          echo "Verifying large video files exist..."
          ls -lh deploy/assets/videos/ || echo "Videos directory not found"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Optimize website files
        run: |
          echo "Preparing Rawcraft website for deployment..."

          # Create temporary build directory
          mkdir -p _site

          # Copy all files from deploy directory to _site
          cp -r deploy/* _site/

          # Ensure all Git LFS video files are properly downloaded and copied
          if [ -d "deploy/assets/videos" ]; then
            echo "Ensuring Git LFS video files are available..."
            git lfs pull
            echo "Copying video files with proper permissions..."
            mkdir -p _site/assets/videos

            # Copy each video file individually to ensure LFS files are properly handled
            for video in deploy/assets/videos/*.mp4; do
              if [ -f "$video" ]; then
                echo "Copying $(basename "$video")..."
                cp "$video" "_site/assets/videos/" || echo "Failed to copy $(basename "$video")"
              fi
            done

            # Verify file sizes to ensure LFS files were properly downloaded
            echo "Verifying video file sizes:"
            ls -lh _site/assets/videos/
          fi

          # Verify Ruracio.mp4 is included and has correct size
          if [ -f "_site/assets/videos/Ruracio.mp4" ]; then
            file_size=$(stat -c%s "_site/assets/videos/Ruracio.mp4" 2>/dev/null || stat -f%z "_site/assets/videos/Ruracio.mp4" 2>/dev/null || echo "0")
            if [ "$file_size" -gt "100000000" ]; then
              echo "✅ Ruracio.mp4 (114MB) successfully included with size: $file_size bytes"
            else
              echo "⚠️ Ruracio.mp4 found but size is too small: $file_size bytes - may be LFS pointer"
              echo "Re-downloading LFS file..."
              git lfs pull --include="**/Ruracio.mp4"
              cp "deploy/assets/videos/Ruracio.mp4" "_site/assets/videos/"
            fi
            ls -lh _site/assets/videos/Ruracio.mp4
          else
            echo "❌ Ruracio.mp4 not found - checking Git LFS status"
            git lfs ls-files | grep Ruracio
            echo "Attempting to download missing LFS files..."
            git lfs pull
            if [ -f "deploy/assets/videos/Ruracio.mp4" ]; then
              cp "deploy/assets/videos/Ruracio.mp4" "_site/assets/videos/"
              echo "✅ Ruracio.mp4 recovered from LFS"
            fi
          fi

          # Create .nojekyll file to prevent Jekyll processing
          touch _site/.nojekyll

          # Update any relative paths if needed
          echo "Optimizing file paths for GitHub Pages..."

          # Set proper MIME types for video files
          if [ -f "_site/.htaccess" ]; then
            echo "Found .htaccess file for Apache optimization"
          fi

          # Verify all critical files exist
          echo "Verifying deployment files..."
          ls -la _site/
          echo "Total site size:"
          du -sh _site/

      - name: Validate HTML and assets
        run: |
          echo "Validating website structure..."

          # Check that index.html exists
          if [ ! -f "_site/index.html" ]; then
            echo "❌ ERROR: index.html not found!"
            exit 1
          fi

          # Check for logo
          if [ -f "_site/assets/images/rawcraft_logo.png" ]; then
            echo "✅ Logo file found"
          else
            echo "⚠️ Logo file missing"
          fi

          # Check video directory
          if [ -d "_site/assets/videos" ]; then
            echo "✅ Videos directory found with files:"
            ls -lh _site/assets/videos/

            # Verify each video file exists and has proper size
            video_count=0
            for video in _site/assets/videos/*.mp4; do
              if [ -f "$video" ]; then
                video_count=$((video_count + 1))
                file_size=$(stat -c%s "$video" 2>/dev/null || stat -f%z "$video" 2>/dev/null || echo "0")
                video_name=$(basename "$video")

                if [ "$file_size" -gt "1000000" ]; then
                  echo "✅ $video_name: ${file_size} bytes (valid video file)"
                else
                  echo "❌ $video_name: ${file_size} bytes (likely LFS pointer, not actual video)"

                  # Attempt recovery for small files
                  echo "Attempting to recover $video_name from Git LFS..."
                  git lfs pull --include="**/$video_name"
                  if [ -f "deploy/assets/videos/$video_name" ]; then
                    cp "deploy/assets/videos/$video_name" "$video"
                    new_size=$(stat -c%s "$video" 2>/dev/null || stat -f%z "$video" 2>/dev/null || echo "0")
                    echo "Recovery result: $video_name now ${new_size} bytes"
                  fi
                fi
              fi
            done

            echo "Total video files found: $video_count"

            # Critical check for Ruracio.mp4
            if [ -f "_site/assets/videos/Ruracio.mp4" ]; then
              ruracio_size=$(stat -c%s "_site/assets/videos/Ruracio.mp4" 2>/dev/null || stat -f%z "_site/assets/videos/Ruracio.mp4" 2>/dev/null || echo "0")
              if [ "$ruracio_size" -gt "100000000" ]; then
                echo "🎬 CRITICAL SUCCESS: Ruracio.mp4 (114MB) properly deployed: ${ruracio_size} bytes"
              else
                echo "🚨 CRITICAL FAILURE: Ruracio.mp4 too small: ${ruracio_size} bytes"
                exit 1
              fi
            else
              echo "🚨 CRITICAL FAILURE: Ruracio.mp4 missing from deployment"
              exit 1
            fi

          else
            echo "❌ Videos directory missing!"
            exit 1
          fi

          # Check for SEO files
          if [ -f "_site/robots.txt" ]; then
            echo "✅ robots.txt found"
          fi

          if [ -f "_site/sitemap.xml" ]; then
            echo "✅ sitemap.xml found"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Success Notification
        run: |
          echo "🎉 Rawcraft website successfully deployed!"
          echo "🌐 Your website is now live at: ${{ steps.deployment.outputs.page_url }}"
          echo "✅ All features including video portfolio should be working"
          echo "🎬 Large videos (including Ruracio.mp4) are served via Git LFS"
          echo ""
          echo "📱 Test these features on your live site:"
          echo "  - Portfolio video modals (click any video)"
          echo "  - Interactive comments, likes, and star ratings"
          echo "  - Mobile responsive design"
          echo "  - Video streaming including 114MB Ruracio.mp4"
          echo ""
          echo "🔗 Direct video test URLs:"
          echo "  - ${{ steps.deployment.outputs.page_url }}assets/videos/Ruracio.mp4"
          echo "  - ${{ steps.deployment.outputs.page_url }}assets/videos/cinematography.mp4"
